#include<iostream>
using namespace std;
typedef enum{Link,Thread}PointerTag;
typedef char TElemType;
typedef struct  Node
{
	TElemType  data;
	Node  *rchild, *lchild;
	PointerTag Ltag=Link, Rtag=Link;
}BiThrNode,*BiThrTree;
BiThrTree pre;
void CreatBiTree(BiThrTree &T)
{
		TElemType c;
		cin >> c;
		if (c == '#')
			T = NULL;
		else
		{
			T = new Node;
			if (!T)
				exit(-1);
			T->data = c;
			CreatBiTree(T->lchild);
			CreatBiTree(T->rchild);
		}
}
/*中序递归线索化二叉树*/
void InOrderThreading(BiThrTree &T)
{
	if (T)
	{
		InOrderThreading(T->lchild);
		if (!T->lchild)
		{
			T->Ltag = Thread;
			T->lchild = pre;
		}
		if (!T->rchild)
			T->Rtag = Thread;
		if (pre&&pre->Rtag == Thread)
			pre->rchild = T;
		pre = T;
		InOrderThreading(T->rchild);
	}
}
/*先序递归线索化二叉树*/
void PreOrderThreading(BiThrTree &T)
{
	if (!T->lchild)
	{
		T->Ltag = Thread;
		T->lchild = pre;
	}
	if (!T->rchild)
		T->Rtag = Thread;
	if (pre&&pre->Rtag == Thread)
		pre->rchild = T;
	pre = T;
	if (T->Ltag == Link)PreOrderThreading(T->lchild);
	if (T->Rtag == Link)PreOrderThreading(T->rchild);
}
/*后序递归线索化二叉树*/
void PostOrderThreading(BiThrTree &T)
{
	if (T)
	{
		PostOrderThreading(T->lchild);
		PostOrderThreading(T->rchild);
		if (!T->lchild)
		{
			T->Ltag = Thread;
			T->lchild = pre;
		}
		if (!T->rchild)
			T->Rtag = Thread;
		if (pre&&pre->Rtag == Thread)
			pre->rchild = T;
		pre = T;
	}
}
/*遍历中序线索二叉树*/
void InOrderTraverse_Thrt1(BiThrTree &T)
{
	BiThrTree p = T;
	while (p)
	{
		while (p->Ltag == Link)
			p = p->lchild;
		cout << p->data;
		while (p->Rtag == Thread && p->rchild)
		{
			p = p->rchild;
			cout << p->data;
		}
		p = p->rchild;
	}
}
void InOrderTraverse_Thrt2(BiThrTree &T)
{
	BiThrTree p = T;
	while (p->Ltag == Link)
		p = p->lchild;
	cout << p->data;
	while (p->rchild)
	{
		if (p->Rtag == Link)
		{
			p = p->rchild;
			while (p->Ltag == Link)
				p = p->lchild;
		}
		else
			p = p->rchild;
		cout << p->data;
	}
}
/*遍历先序线索二叉树*/
void PreOrderTraverse_Thrt(BiThrTree &T)
{
	BiThrTree  p = T;
	cout << p->data;
	while (p->rchild)
	{
		if (p->Ltag == Link)
			p = p->lchild;
		else
			p = p->rchild;
		cout << p->data;
	}
}
/*遍历后序线索二叉树*/
void PostOrderTraverse_Thrt(BiThrTree &T)
{

}
int main()
{
	BiThrTree T;
	CreatBiTree(T);
	PreOrderThreading(T);
	InOrderTraverse_Thrt2(T);
	system("pause");
}